@model MartineOBotWebApp.ViewModels.IdentityLoginViewModel
@{
    ViewBag.Title = "Login";
    ModelStateDictionary modelStateDico = ViewContext.ViewData.ModelState;
    bool hasSuccessUsername = modelStateDico.IsValidField("Username");
    bool hasSuccessPassword = modelStateDico.IsValidField("Password");
}

<div class="row">
    <div class="col-md-3 col-md-offset-4">
        <h2>Connection page</h2>
        
        @using (Html.BeginForm("Login", "Account", new { returnUrl = ViewBag.returnUrl }, FormMethod.Post, new { @class = "" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group @((hasSuccessUsername)? "":"has-error")">
                @Html.LabelFor(model => model.Username)
                @Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
                <span class="help-block">@Html.ValidationMessageFor(model => model.Username)</span>
            </div>
            <div class="form-group @((hasSuccessPassword)? "":"has-error")">
                @Html.LabelFor(model => model.Password)
                @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Password" })
                <span class="help-block">@Html.ValidationMessageFor(model => model.Password)</span>
            </div>
            <div class="checkbox">
                <label>
                    @Html.CheckBoxFor(model => model.CheckMe) Remember me
                </label>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-default">Submit</button>
            </div>


            if (modelStateDico.ContainsKey("loginError"))
            {
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    @Html.ValidationMessage("loginError")
                </div>
            }


        }

    </div>
</div>